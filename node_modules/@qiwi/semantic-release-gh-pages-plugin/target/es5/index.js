"use strict";
/** @module semantic-release-gh-pages-plugin */
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var aggregate_error_1 = tslib_1.__importDefault(require("aggregate-error"));
var fs_1 = tslib_1.__importDefault(require("fs"));
var path_1 = tslib_1.__importDefault(require("path"));
var config_1 = require("./config");
var ghpages_1 = require("./ghpages");
var tpl_1 = require("./tpl");
var lodash_1 = require("lodash");
tslib_1.__exportStar(require("./defaults"), exports);
var _config;
exports.verifyConditions = function (pluginConfig, context) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var logger, config;
    return tslib_1.__generator(this, function (_a) {
        logger = context.logger;
        config = config_1.resolveConfig(pluginConfig, context, undefined, 'publish');
        logger.log('verify gh-pages config');
        if (!config.token) {
            throw new aggregate_error_1.default(['env.GH_TOKEN is required by gh-pages plugin']);
        }
        if (!config.repo) {
            throw new aggregate_error_1.default(['package.json repository.url does not match github.com pattern']);
        }
        if (!fs_1.default.existsSync(config.src) || !fs_1.default.lstatSync(config.src).isDirectory()) {
            logger.error('Resolved docs src path=', path_1.default.resolve(config.src));
            throw new aggregate_error_1.default(['docs source directory does not exist']);
        }
        Object.assign(pluginConfig, config);
        _config = config;
        return [2 /*return*/];
    });
}); };
exports.publish = function (pluginConfig, context) { return tslib_1.__awaiter(void 0, void 0, void 0, function () {
    var config, logger, env, cwd, message, pushOpts;
    return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                config = config_1.resolveConfig(pluginConfig, context, undefined, 'publish');
                logger = context.logger, env = context.env, cwd = context.cwd;
                message = tpl_1.render(config.msg, context, logger);
                pushOpts = tslib_1.__assign(tslib_1.__assign({}, config), { message: message,
                    logger: logger,
                    env: env,
                    cwd: cwd });
                if (!!lodash_1.isEqual(_config, config)) return [3 /*break*/, 2];
                return [4 /*yield*/, exports.verifyConditions(pluginConfig, context)];
            case 1:
                _a.sent();
                _a.label = 2;
            case 2:
                logger.log('Publishing docs via gh-pages');
                return [2 /*return*/, ghpages_1.publish(pushOpts)];
        }
    });
}); };
exports.default = {
    verifyConditions: exports.verifyConditions,
    publish: exports.publish
};
