{"ast":null,"code":"/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDate(date) {\n  if (date == null) {\n    return undefined;\n  }\n  var year = date.getFullYear();\n  var month = date.getMonth() + 1;\n  var day = date.getDate();\n  return year + \"-\" + (month < 10 ? \"0\" + month : month) + \"-\" + (day < 10 ? \"0\" + day : day);\n}\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\nexport function decodeDate(input) {\n  if (input == null || !input.length) {\n    return undefined;\n  }\n  var dateString = input instanceof Array ? input[0] : input;\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n  var parts = dateString.split('-');\n  // may only be a year so won't even have a month\n  if (parts[1] != null) {\n    parts[1] -= 1; // Note: months are 0-based\n  } else {\n    // just a year, set the month and day to the first\n    parts[1] = 0;\n    parts[2] = 1;\n  }\n  var decoded = new (Date.bind.apply(Date, [void 0].concat(parts)))();\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n  return decoded;\n}\n/**\n * Encodes a date as a string in ISO 8601 (\"2019-05-28T10:58:40Z\") format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDateTime(date) {\n  if (date == null) {\n    return undefined;\n  }\n  return date.toISOString();\n}\n/**\n * Converts a date in the https://en.wikipedia.org/wiki/ISO_8601 format.\n * For allowed inputs see specs:\n *  - https://tools.ietf.org/html/rfc2822#page-14\n *  - http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '1995-12-17T03:24:00'\n * @return {Date} parsed date\n */\nexport function decodeDateTime(input) {\n  if (input == null || !input.length) {\n    return undefined;\n  }\n  var dateString = input instanceof Array ? input[0] : input;\n  if (dateString == null || !dateString.length) {\n    return undefined;\n  }\n  var decoded = new Date(dateString);\n  if (isNaN(decoded.getTime())) {\n    return undefined;\n  }\n  return decoded;\n}\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\nexport function encodeBoolean(bool) {\n  if (bool === undefined) {\n    return undefined;\n  }\n  return bool ? '1' : '0';\n}\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\nexport function decodeBoolean(input) {\n  if (input == null) {\n    return undefined;\n  }\n  var boolStr = input instanceof Array ? input[0] : input;\n  if (boolStr === '1') {\n    return true;\n  } else if (boolStr === '0') {\n    return false;\n  }\n  return undefined;\n}\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\nexport function encodeNumber(num) {\n  if (num == null) {\n    return undefined;\n  }\n  return String(num);\n}\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\nexport function decodeNumber(input) {\n  if (input == null) {\n    return undefined;\n  }\n  var numStr = input instanceof Array ? input[0] : input;\n  if (numStr == null || numStr === '') {\n    return undefined;\n  }\n  var result = +numStr;\n  if (isNaN(result)) {\n    return undefined;\n  }\n  return result;\n}\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\nexport function encodeString(str) {\n  if (str == null) {\n    return undefined;\n  }\n  return String(str);\n}\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\nexport function decodeString(input) {\n  if (input == null) {\n    return undefined;\n  }\n  var str = input instanceof Array ? input[0] : input;\n  if (str == null) {\n    return undefined;\n  }\n  return String(str);\n}\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\nexport function encodeJson(any) {\n  if (any == null) {\n    return undefined;\n  }\n  return JSON.stringify(any);\n}\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\nexport function decodeJson(input) {\n  if (input == null) {\n    return undefined;\n  }\n  var jsonStr = input instanceof Array ? input[0] : input;\n  if (!jsonStr) {\n    return undefined;\n  }\n  var result;\n  try {\n    result = JSON.parse(jsonStr);\n  } catch (e) {\n    /* ignore errors, returning undefined */\n  }\n  return result;\n}\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeArray(array) {\n  if (!array) {\n    return undefined;\n  }\n  return array;\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeArray(input) {\n  if (!input) {\n    return undefined;\n  }\n  if (!(input instanceof Array)) {\n    return [input];\n  }\n  return input.map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeNumericArray(array) {\n  if (!array) {\n    return undefined;\n  }\n  return array.map(function (d) {\n    return \"\" + d;\n  });\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeNumericArray(input) {\n  var arr = decodeArray(input);\n  if (!arr) {\n    return undefined;\n  }\n  return arr.map(function (item) {\n    return +item;\n  }).filter(function (item) {\n    return item !== undefined && !isNaN(item);\n  });\n}\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\nexport function encodeDelimitedArray(array, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n  if (!array) {\n    return undefined;\n  }\n  return array.join(entrySeparator);\n}\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedArray(input, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n  if (input == null) {\n    return undefined;\n  }\n  var arrayStr = input instanceof Array ? input[0] : input;\n  if (!arrayStr) {\n    return undefined;\n  }\n  return arrayStr.split(entrySeparator).map(function (item) {\n    return item === '' ? undefined : item;\n  }).filter(function (item) {\n    return item !== undefined;\n  });\n}\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\nexport var encodeDelimitedNumericArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedNumericArray(arrayStr, entrySeparator) {\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n  var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n  if (!decoded) {\n    return undefined;\n  }\n  return decoded.map(function (d) {\n    return d == null ? undefined : +d;\n  }).filter(function (d) {\n    return d !== undefined && !isNaN(d);\n  });\n}\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport function encodeObject(obj, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n  if (!obj || !Object.keys(obj).length) {\n    return undefined;\n  }\n  return Object.keys(obj).map(function (key) {\n    return \"\" + key + keyValSeparator + obj[key];\n  }).join(entrySeparator);\n}\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeObject(input, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n  if (input == null) {\n    return undefined;\n  }\n  var objStr = input instanceof Array ? input[0] : input;\n  if (!objStr || !objStr.length) {\n    return undefined;\n  }\n  var obj = {};\n  objStr.split(entrySeparator).forEach(function (entryStr) {\n    var _a = entryStr.split(keyValSeparator),\n      key = _a[0],\n      value = _a[1];\n    obj[key] = value === '' ? undefined : value;\n  });\n  return obj;\n}\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport var encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeNumericObject(input, keyValSeparator, entrySeparator) {\n  if (keyValSeparator === void 0) {\n    keyValSeparator = '-';\n  }\n  if (entrySeparator === void 0) {\n    entrySeparator = '_';\n  }\n  var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n  if (!decoded) {\n    return undefined;\n  }\n  // convert to numbers\n  Object.keys(decoded).forEach(function (key) {\n    if (decoded[key] !== undefined) {\n      decoded[key] = decodeNumber(decoded[key]);\n    }\n  });\n  return decoded;\n}","map":{"version":3,"names":["encodeDate","date","undefined","year","getFullYear","month","getMonth","day","getDate","decodeDate","input","length","dateString","Array","parts","split","decoded","Date","bind","apply","concat","isNaN","getTime","encodeDateTime","toISOString","decodeDateTime","encodeBoolean","bool","decodeBoolean","boolStr","encodeNumber","num","String","decodeNumber","numStr","result","encodeString","str","decodeString","encodeJson","any","JSON","stringify","decodeJson","jsonStr","parse","e","encodeArray","array","decodeArray","map","item","filter","encodeNumericArray","d","decodeNumericArray","arr","encodeDelimitedArray","entrySeparator","join","decodeDelimitedArray","arrayStr","encodeDelimitedNumericArray","decodeDelimitedNumericArray","encodeObject","obj","keyValSeparator","Object","keys","key","decodeObject","objStr","forEach","entryStr","_a","value","encodeNumericObject","decodeNumericObject"],"sources":["/root/experiment/nova-explorer/node_modules/serialize-query-params/esm/serialize.js"],"sourcesContent":["/**\n * Encodes a date as a string in YYYY-MM-DD format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDate(date) {\n    if (date == null) {\n        return undefined;\n    }\n    var year = date.getFullYear();\n    var month = date.getMonth() + 1;\n    var day = date.getDate();\n    return year + \"-\" + (month < 10 ? \"0\" + month : month) + \"-\" + (day < 10 ? \"0\" + day : day);\n}\n/**\n * Converts a date in the format 'YYYY-mm-dd...' into a proper date, because\n * new Date() does not do that correctly. The date can be as complete or incomplete\n * as necessary (aka, '2015', '2015-10', '2015-10-01').\n * It will not work for dates that have times included in them.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '2015-10-01'\n * @return {Date} parsed date\n */\nexport function decodeDate(input) {\n    if (input == null || !input.length) {\n        return undefined;\n    }\n    var dateString = input instanceof Array ? input[0] : input;\n    if (dateString == null || !dateString.length) {\n        return undefined;\n    }\n    var parts = dateString.split('-');\n    // may only be a year so won't even have a month\n    if (parts[1] != null) {\n        parts[1] -= 1; // Note: months are 0-based\n    }\n    else {\n        // just a year, set the month and day to the first\n        parts[1] = 0;\n        parts[2] = 1;\n    }\n    var decoded = new (Date.bind.apply(Date, [void 0].concat(parts)))();\n    if (isNaN(decoded.getTime())) {\n        return undefined;\n    }\n    return decoded;\n}\n/**\n * Encodes a date as a string in ISO 8601 (\"2019-05-28T10:58:40Z\") format.\n *\n * @param {Date} date\n * @return {String} the encoded date\n */\nexport function encodeDateTime(date) {\n    if (date == null) {\n        return undefined;\n    }\n    return date.toISOString();\n}\n/**\n * Converts a date in the https://en.wikipedia.org/wiki/ISO_8601 format.\n * For allowed inputs see specs:\n *  - https://tools.ietf.org/html/rfc2822#page-14\n *  - http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\n *\n * If an array is provided, only the first entry is used.\n *\n * @param  {String} input String date form like '1995-12-17T03:24:00'\n * @return {Date} parsed date\n */\nexport function decodeDateTime(input) {\n    if (input == null || !input.length) {\n        return undefined;\n    }\n    var dateString = input instanceof Array ? input[0] : input;\n    if (dateString == null || !dateString.length) {\n        return undefined;\n    }\n    var decoded = new Date(dateString);\n    if (isNaN(decoded.getTime())) {\n        return undefined;\n    }\n    return decoded;\n}\n/**\n * Encodes a boolean as a string. true -> \"1\", false -> \"0\".\n *\n * @param {Boolean} bool\n * @return {String} the encoded boolean\n */\nexport function encodeBoolean(bool) {\n    if (bool === undefined) {\n        return undefined;\n    }\n    return bool ? '1' : '0';\n}\n/**\n * Decodes a boolean from a string. \"1\" -> true, \"0\" -> false.\n * Everything else maps to undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded boolean string\n * @return {Boolean} the boolean value\n */\nexport function decodeBoolean(input) {\n    if (input == null) {\n        return undefined;\n    }\n    var boolStr = input instanceof Array ? input[0] : input;\n    if (boolStr === '1') {\n        return true;\n    }\n    else if (boolStr === '0') {\n        return false;\n    }\n    return undefined;\n}\n/**\n * Encodes a number as a string.\n *\n * @param {Number} num\n * @return {String} the encoded number\n */\nexport function encodeNumber(num) {\n    if (num == null) {\n        return undefined;\n    }\n    return String(num);\n}\n/**\n * Decodes a number from a string. If the number is invalid,\n * it returns undefined.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded number string\n * @return {Number} the number value\n */\nexport function decodeNumber(input) {\n    if (input == null) {\n        return undefined;\n    }\n    var numStr = input instanceof Array ? input[0] : input;\n    if (numStr == null || numStr === '') {\n        return undefined;\n    }\n    var result = +numStr;\n    if (isNaN(result)) {\n        return undefined;\n    }\n    return result;\n}\n/**\n * Encodes a string while safely handling null and undefined values.\n *\n * @param {String} str a string to encode\n * @return {String} the encoded string\n */\nexport function encodeString(str) {\n    if (str == null) {\n        return undefined;\n    }\n    return String(str);\n}\n/**\n * Decodes a string while safely handling null and undefined values.\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input the encoded string\n * @return {String} the string value\n */\nexport function decodeString(input) {\n    if (input == null) {\n        return undefined;\n    }\n    var str = input instanceof Array ? input[0] : input;\n    if (str == null) {\n        return undefined;\n    }\n    return String(str);\n}\n/**\n * Encodes anything as a JSON string.\n *\n * @param {Any} any The thing to be encoded\n * @return {String} The JSON string representation of any\n */\nexport function encodeJson(any) {\n    if (any == null) {\n        return undefined;\n    }\n    return JSON.stringify(any);\n}\n/**\n * Decodes a JSON string into javascript\n *\n * If an array is provided, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @return {Any} The javascript representation\n */\nexport function decodeJson(input) {\n    if (input == null) {\n        return undefined;\n    }\n    var jsonStr = input instanceof Array ? input[0] : input;\n    if (!jsonStr) {\n        return undefined;\n    }\n    var result;\n    try {\n        result = JSON.parse(jsonStr);\n    }\n    catch (e) {\n        /* ignore errors, returning undefined */\n    }\n    return result;\n}\n/**\n * Encodes an array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeArray(array) {\n    if (!array) {\n        return undefined;\n    }\n    return array;\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeArray(input) {\n    if (!input) {\n        return undefined;\n    }\n    if (!(input instanceof Array)) {\n        return [input];\n    }\n    return input\n        .map(function (item) { return (item === '' ? undefined : item); })\n        .filter(function (item) { return item !== undefined; });\n}\n/**\n * Encodes a numeric array as a JSON string.\n *\n * @param {Array} array The array to be encoded\n * @return {String[]} The array of strings to be put in the URL\n * as repeated query parameters\n */\nexport function encodeNumericArray(array) {\n    if (!array) {\n        return undefined;\n    }\n    return array.map(function (d) { return \"\" + d; });\n}\n/**\n * Decodes an array or singular value and returns it as an array\n * or undefined if falsy. Filters out undefined and NaN values.\n *\n * @param {String | Array} input The input value\n * @return {Array} The javascript representation\n */\nexport function decodeNumericArray(input) {\n    var arr = decodeArray(input);\n    if (!arr) {\n        return undefined;\n    }\n    return arr\n        .map(function (item) { return +item; })\n        .filter(function (item) { return item !== undefined && !isNaN(item); });\n}\n/**\n * Encodes an array as a delimited string. For example,\n * ['a', 'b'] -> 'a_b' with entrySeparator='_'\n *\n * @param array The array to be encoded\n * @param entrySeparator The string used to delimit entries\n * @return The array as a string with elements joined by the\n * entry separator\n */\nexport function encodeDelimitedArray(array, entrySeparator) {\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    if (!array) {\n        return undefined;\n    }\n    return array.join(entrySeparator);\n}\n/**\n * Decodes a delimited string into javascript array. For example,\n * 'a_b' -> ['a', 'b'] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The JSON string representation\n * @param entrySeparator The array as a string with elements joined by the\n * entry separator\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedArray(input, entrySeparator) {\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    if (input == null) {\n        return undefined;\n    }\n    var arrayStr = input instanceof Array ? input[0] : input;\n    if (!arrayStr) {\n        return undefined;\n    }\n    return arrayStr\n        .split(entrySeparator)\n        .map(function (item) { return (item === '' ? undefined : item); })\n        .filter(function (item) { return item !== undefined; });\n}\n/**\n * Encodes a numeric array as a delimited string. (alias of encodeDelimitedArray)\n * For example, [1, 2] -> '1_2' with entrySeparator='_'\n *\n * @param {Array} array The array to be encoded\n * @return {String} The JSON string representation of array\n */\nexport var encodeDelimitedNumericArray = encodeDelimitedArray;\n/**\n * Decodes a delimited string into javascript array where all entries are numbers\n * For example, '1_2' -> [1, 2] with entrySeparator='_'\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} jsonStr The JSON string representation\n * @return {Array} The javascript representation\n */\nexport function decodeDelimitedNumericArray(arrayStr, entrySeparator) {\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    var decoded = decodeDelimitedArray(arrayStr, entrySeparator);\n    if (!decoded) {\n        return undefined;\n    }\n    return decoded\n        .map(function (d) { return (d == null ? undefined : +d); })\n        .filter(function (d) { return d !== undefined && !isNaN(d); });\n}\n/**\n * Encode simple objects as readable strings. Works only for simple,\n * flat objects where values are numbers, strings.\n *\n * For example { foo: bar, boo: baz } -> \"foo-bar_boo-baz\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport function encodeObject(obj, keyValSeparator, entrySeparator) {\n    if (keyValSeparator === void 0) { keyValSeparator = '-'; }\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    if (!obj || !Object.keys(obj).length) {\n        return undefined;\n    }\n    return Object.keys(obj)\n        .map(function (key) { return \"\" + key + keyValSeparator + obj[key]; })\n        .join(entrySeparator);\n}\n/**\n * Decodes a simple object to javascript. Currently works only for simple,\n * flat objects where values are strings.\n *\n * For example \"foo-bar_boo-baz\" -> { foo: bar, boo: baz }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeObject(input, keyValSeparator, entrySeparator) {\n    if (keyValSeparator === void 0) { keyValSeparator = '-'; }\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    if (input == null) {\n        return undefined;\n    }\n    var objStr = input instanceof Array ? input[0] : input;\n    if (!objStr || !objStr.length) {\n        return undefined;\n    }\n    var obj = {};\n    objStr.split(entrySeparator).forEach(function (entryStr) {\n        var _a = entryStr.split(keyValSeparator), key = _a[0], value = _a[1];\n        obj[key] = value === '' ? undefined : value;\n    });\n    return obj;\n}\n/**\n * Encode simple objects as readable strings. Alias of encodeObject.\n *\n * For example { foo: 123, boo: 521 } -> \"foo-123_boo-521\"\n *\n * @param {Object} object The object to encode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {String} The encoded object\n */\nexport var encodeNumericObject = encodeObject;\n/**\n * Decodes a simple object to javascript where all values are numbers.\n * Currently works only for simple, flat objects.\n *\n * For example \"foo-123_boo-521\" -> { foo: 123, boo: 521 }\n *\n * If an array is provided as input, only the first entry is used.\n *\n * @param {String} input The object string to decode\n * @param {String} keyValSeparator=\"-\" The separator between keys and values\n * @param {String} entrySeparator=\"_\" The separator between entries\n * @return {Object} The javascript object\n */\nexport function decodeNumericObject(input, keyValSeparator, entrySeparator) {\n    if (keyValSeparator === void 0) { keyValSeparator = '-'; }\n    if (entrySeparator === void 0) { entrySeparator = '_'; }\n    var decoded = decodeObject(input, keyValSeparator, entrySeparator);\n    if (!decoded) {\n        return undefined;\n    }\n    // convert to numbers\n    Object.keys(decoded).forEach(function (key) {\n        if (decoded[key] !== undefined) {\n            decoded[key] = decodeNumber(decoded[key]);\n        }\n    });\n    return decoded;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,UAAUA,CAACC,IAAI,EAAE;EAC7B,IAAIA,IAAI,IAAI,IAAI,EAAE;IACd,OAAOC,SAAS;EACpB;EACA,IAAIC,IAAI,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;EAC7B,IAAIC,KAAK,GAAGJ,IAAI,CAACK,QAAQ,CAAC,CAAC,GAAG,CAAC;EAC/B,IAAIC,GAAG,GAAGN,IAAI,CAACO,OAAO,CAAC,CAAC;EACxB,OAAOL,IAAI,GAAG,GAAG,IAAIE,KAAK,GAAG,EAAE,GAAG,GAAG,GAAGA,KAAK,GAAGA,KAAK,CAAC,GAAG,GAAG,IAAIE,GAAG,GAAG,EAAE,GAAG,GAAG,GAAGA,GAAG,GAAGA,GAAG,CAAC;AAC/F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,UAAUA,CAACC,KAAK,EAAE;EAC9B,IAAIA,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,CAACC,MAAM,EAAE;IAChC,OAAOT,SAAS;EACpB;EACA,IAAIU,UAAU,GAAGF,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EAC1D,IAAIE,UAAU,IAAI,IAAI,IAAI,CAACA,UAAU,CAACD,MAAM,EAAE;IAC1C,OAAOT,SAAS;EACpB;EACA,IAAIY,KAAK,GAAGF,UAAU,CAACG,KAAK,CAAC,GAAG,CAAC;EACjC;EACA,IAAID,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;IAClBA,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;EACnB,CAAC,MACI;IACD;IACAA,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;IACZA,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;EAChB;EACA,IAAIE,OAAO,GAAG,KAAKC,IAAI,CAACC,IAAI,CAACC,KAAK,CAACF,IAAI,EAAE,CAAC,KAAK,CAAC,CAAC,CAACG,MAAM,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC;EACnE,IAAIO,KAAK,CAACL,OAAO,CAACM,OAAO,CAAC,CAAC,CAAC,EAAE;IAC1B,OAAOpB,SAAS;EACpB;EACA,OAAOc,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASO,cAAcA,CAACtB,IAAI,EAAE;EACjC,IAAIA,IAAI,IAAI,IAAI,EAAE;IACd,OAAOC,SAAS;EACpB;EACA,OAAOD,IAAI,CAACuB,WAAW,CAAC,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACf,KAAK,EAAE;EAClC,IAAIA,KAAK,IAAI,IAAI,IAAI,CAACA,KAAK,CAACC,MAAM,EAAE;IAChC,OAAOT,SAAS;EACpB;EACA,IAAIU,UAAU,GAAGF,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EAC1D,IAAIE,UAAU,IAAI,IAAI,IAAI,CAACA,UAAU,CAACD,MAAM,EAAE;IAC1C,OAAOT,SAAS;EACpB;EACA,IAAIc,OAAO,GAAG,IAAIC,IAAI,CAACL,UAAU,CAAC;EAClC,IAAIS,KAAK,CAACL,OAAO,CAACM,OAAO,CAAC,CAAC,CAAC,EAAE;IAC1B,OAAOpB,SAAS;EACpB;EACA,OAAOc,OAAO;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,aAAaA,CAACC,IAAI,EAAE;EAChC,IAAIA,IAAI,KAAKzB,SAAS,EAAE;IACpB,OAAOA,SAAS;EACpB;EACA,OAAOyB,IAAI,GAAG,GAAG,GAAG,GAAG;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAAaA,CAAClB,KAAK,EAAE;EACjC,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf,OAAOR,SAAS;EACpB;EACA,IAAI2B,OAAO,GAAGnB,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EACvD,IAAImB,OAAO,KAAK,GAAG,EAAE;IACjB,OAAO,IAAI;EACf,CAAC,MACI,IAAIA,OAAO,KAAK,GAAG,EAAE;IACtB,OAAO,KAAK;EAChB;EACA,OAAO3B,SAAS;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAAS4B,YAAYA,CAACC,GAAG,EAAE;EAC9B,IAAIA,GAAG,IAAI,IAAI,EAAE;IACb,OAAO7B,SAAS;EACpB;EACA,OAAO8B,MAAM,CAACD,GAAG,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,YAAYA,CAACvB,KAAK,EAAE;EAChC,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf,OAAOR,SAAS;EACpB;EACA,IAAIgC,MAAM,GAAGxB,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EACtD,IAAIwB,MAAM,IAAI,IAAI,IAAIA,MAAM,KAAK,EAAE,EAAE;IACjC,OAAOhC,SAAS;EACpB;EACA,IAAIiC,MAAM,GAAG,CAACD,MAAM;EACpB,IAAIb,KAAK,CAACc,MAAM,CAAC,EAAE;IACf,OAAOjC,SAAS;EACpB;EACA,OAAOiC,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAACC,GAAG,EAAE;EAC9B,IAAIA,GAAG,IAAI,IAAI,EAAE;IACb,OAAOnC,SAAS;EACpB;EACA,OAAO8B,MAAM,CAACK,GAAG,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,YAAYA,CAAC5B,KAAK,EAAE;EAChC,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf,OAAOR,SAAS;EACpB;EACA,IAAImC,GAAG,GAAG3B,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EACnD,IAAI2B,GAAG,IAAI,IAAI,EAAE;IACb,OAAOnC,SAAS;EACpB;EACA,OAAO8B,MAAM,CAACK,GAAG,CAAC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,UAAUA,CAACC,GAAG,EAAE;EAC5B,IAAIA,GAAG,IAAI,IAAI,EAAE;IACb,OAAOtC,SAAS;EACpB;EACA,OAAOuC,IAAI,CAACC,SAAS,CAACF,GAAG,CAAC;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,UAAUA,CAACjC,KAAK,EAAE;EAC9B,IAAIA,KAAK,IAAI,IAAI,EAAE;IACf,OAAOR,SAAS;EACpB;EACA,IAAI0C,OAAO,GAAGlC,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EACvD,IAAI,CAACkC,OAAO,EAAE;IACV,OAAO1C,SAAS;EACpB;EACA,IAAIiC,MAAM;EACV,IAAI;IACAA,MAAM,GAAGM,IAAI,CAACI,KAAK,CAACD,OAAO,CAAC;EAChC,CAAC,CACD,OAAOE,CAAC,EAAE;IACN;EAAA;EAEJ,OAAOX,MAAM;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,WAAWA,CAACC,KAAK,EAAE;EAC/B,IAAI,CAACA,KAAK,EAAE;IACR,OAAO9C,SAAS;EACpB;EACA,OAAO8C,KAAK;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,WAAWA,CAACvC,KAAK,EAAE;EAC/B,IAAI,CAACA,KAAK,EAAE;IACR,OAAOR,SAAS;EACpB;EACA,IAAI,EAAEQ,KAAK,YAAYG,KAAK,CAAC,EAAE;IAC3B,OAAO,CAACH,KAAK,CAAC;EAClB;EACA,OAAOA,KAAK,CACPwC,GAAG,CAAC,UAAUC,IAAI,EAAE;IAAE,OAAQA,IAAI,KAAK,EAAE,GAAGjD,SAAS,GAAGiD,IAAI;EAAG,CAAC,CAAC,CACjEC,MAAM,CAAC,UAAUD,IAAI,EAAE;IAAE,OAAOA,IAAI,KAAKjD,SAAS;EAAE,CAAC,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASmD,kBAAkBA,CAACL,KAAK,EAAE;EACtC,IAAI,CAACA,KAAK,EAAE;IACR,OAAO9C,SAAS;EACpB;EACA,OAAO8C,KAAK,CAACE,GAAG,CAAC,UAAUI,CAAC,EAAE;IAAE,OAAO,EAAE,GAAGA,CAAC;EAAE,CAAC,CAAC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA,CAAC7C,KAAK,EAAE;EACtC,IAAI8C,GAAG,GAAGP,WAAW,CAACvC,KAAK,CAAC;EAC5B,IAAI,CAAC8C,GAAG,EAAE;IACN,OAAOtD,SAAS;EACpB;EACA,OAAOsD,GAAG,CACLN,GAAG,CAAC,UAAUC,IAAI,EAAE;IAAE,OAAO,CAACA,IAAI;EAAE,CAAC,CAAC,CACtCC,MAAM,CAAC,UAAUD,IAAI,EAAE;IAAE,OAAOA,IAAI,KAAKjD,SAAS,IAAI,CAACmB,KAAK,CAAC8B,IAAI,CAAC;EAAE,CAAC,CAAC;AAC/E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,oBAAoBA,CAACT,KAAK,EAAEU,cAAc,EAAE;EACxD,IAAIA,cAAc,KAAK,KAAK,CAAC,EAAE;IAAEA,cAAc,GAAG,GAAG;EAAE;EACvD,IAAI,CAACV,KAAK,EAAE;IACR,OAAO9C,SAAS;EACpB;EACA,OAAO8C,KAAK,CAACW,IAAI,CAACD,cAAc,CAAC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASE,oBAAoBA,CAAClD,KAAK,EAAEgD,cAAc,EAAE;EACxD,IAAIA,cAAc,KAAK,KAAK,CAAC,EAAE;IAAEA,cAAc,GAAG,GAAG;EAAE;EACvD,IAAIhD,KAAK,IAAI,IAAI,EAAE;IACf,OAAOR,SAAS;EACpB;EACA,IAAI2D,QAAQ,GAAGnD,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EACxD,IAAI,CAACmD,QAAQ,EAAE;IACX,OAAO3D,SAAS;EACpB;EACA,OAAO2D,QAAQ,CACV9C,KAAK,CAAC2C,cAAc,CAAC,CACrBR,GAAG,CAAC,UAAUC,IAAI,EAAE;IAAE,OAAQA,IAAI,KAAK,EAAE,GAAGjD,SAAS,GAAGiD,IAAI;EAAG,CAAC,CAAC,CACjEC,MAAM,CAAC,UAAUD,IAAI,EAAE;IAAE,OAAOA,IAAI,KAAKjD,SAAS;EAAE,CAAC,CAAC;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAI4D,2BAA2B,GAAGL,oBAAoB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASM,2BAA2BA,CAACF,QAAQ,EAAEH,cAAc,EAAE;EAClE,IAAIA,cAAc,KAAK,KAAK,CAAC,EAAE;IAAEA,cAAc,GAAG,GAAG;EAAE;EACvD,IAAI1C,OAAO,GAAG4C,oBAAoB,CAACC,QAAQ,EAAEH,cAAc,CAAC;EAC5D,IAAI,CAAC1C,OAAO,EAAE;IACV,OAAOd,SAAS;EACpB;EACA,OAAOc,OAAO,CACTkC,GAAG,CAAC,UAAUI,CAAC,EAAE;IAAE,OAAQA,CAAC,IAAI,IAAI,GAAGpD,SAAS,GAAG,CAACoD,CAAC;EAAG,CAAC,CAAC,CAC1DF,MAAM,CAAC,UAAUE,CAAC,EAAE;IAAE,OAAOA,CAAC,KAAKpD,SAAS,IAAI,CAACmB,KAAK,CAACiC,CAAC,CAAC;EAAE,CAAC,CAAC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASU,YAAYA,CAACC,GAAG,EAAEC,eAAe,EAAER,cAAc,EAAE;EAC/D,IAAIQ,eAAe,KAAK,KAAK,CAAC,EAAE;IAAEA,eAAe,GAAG,GAAG;EAAE;EACzD,IAAIR,cAAc,KAAK,KAAK,CAAC,EAAE;IAAEA,cAAc,GAAG,GAAG;EAAE;EACvD,IAAI,CAACO,GAAG,IAAI,CAACE,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAACtD,MAAM,EAAE;IAClC,OAAOT,SAAS;EACpB;EACA,OAAOiE,MAAM,CAACC,IAAI,CAACH,GAAG,CAAC,CAClBf,GAAG,CAAC,UAAUmB,GAAG,EAAE;IAAE,OAAO,EAAE,GAAGA,GAAG,GAAGH,eAAe,GAAGD,GAAG,CAACI,GAAG,CAAC;EAAE,CAAC,CAAC,CACrEV,IAAI,CAACD,cAAc,CAAC;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASY,YAAYA,CAAC5D,KAAK,EAAEwD,eAAe,EAAER,cAAc,EAAE;EACjE,IAAIQ,eAAe,KAAK,KAAK,CAAC,EAAE;IAAEA,eAAe,GAAG,GAAG;EAAE;EACzD,IAAIR,cAAc,KAAK,KAAK,CAAC,EAAE;IAAEA,cAAc,GAAG,GAAG;EAAE;EACvD,IAAIhD,KAAK,IAAI,IAAI,EAAE;IACf,OAAOR,SAAS;EACpB;EACA,IAAIqE,MAAM,GAAG7D,KAAK,YAAYG,KAAK,GAAGH,KAAK,CAAC,CAAC,CAAC,GAAGA,KAAK;EACtD,IAAI,CAAC6D,MAAM,IAAI,CAACA,MAAM,CAAC5D,MAAM,EAAE;IAC3B,OAAOT,SAAS;EACpB;EACA,IAAI+D,GAAG,GAAG,CAAC,CAAC;EACZM,MAAM,CAACxD,KAAK,CAAC2C,cAAc,CAAC,CAACc,OAAO,CAAC,UAAUC,QAAQ,EAAE;IACrD,IAAIC,EAAE,GAAGD,QAAQ,CAAC1D,KAAK,CAACmD,eAAe,CAAC;MAAEG,GAAG,GAAGK,EAAE,CAAC,CAAC,CAAC;MAAEC,KAAK,GAAGD,EAAE,CAAC,CAAC,CAAC;IACpET,GAAG,CAACI,GAAG,CAAC,GAAGM,KAAK,KAAK,EAAE,GAAGzE,SAAS,GAAGyE,KAAK;EAC/C,CAAC,CAAC;EACF,OAAOV,GAAG;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIW,mBAAmB,GAAGZ,YAAY;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASa,mBAAmBA,CAACnE,KAAK,EAAEwD,eAAe,EAAER,cAAc,EAAE;EACxE,IAAIQ,eAAe,KAAK,KAAK,CAAC,EAAE;IAAEA,eAAe,GAAG,GAAG;EAAE;EACzD,IAAIR,cAAc,KAAK,KAAK,CAAC,EAAE;IAAEA,cAAc,GAAG,GAAG;EAAE;EACvD,IAAI1C,OAAO,GAAGsD,YAAY,CAAC5D,KAAK,EAAEwD,eAAe,EAAER,cAAc,CAAC;EAClE,IAAI,CAAC1C,OAAO,EAAE;IACV,OAAOd,SAAS;EACpB;EACA;EACAiE,MAAM,CAACC,IAAI,CAACpD,OAAO,CAAC,CAACwD,OAAO,CAAC,UAAUH,GAAG,EAAE;IACxC,IAAIrD,OAAO,CAACqD,GAAG,CAAC,KAAKnE,SAAS,EAAE;MAC5Bc,OAAO,CAACqD,GAAG,CAAC,GAAGpC,YAAY,CAACjB,OAAO,CAACqD,GAAG,CAAC,CAAC;IAC7C;EACJ,CAAC,CAAC;EACF,OAAOrD,OAAO;AAClB"},"metadata":{},"sourceType":"module"}