{"ast":null,"code":"import * as React from 'react';\nimport { parse as parseQueryString, encodeQueryParams } from 'serialize-query-params';\nimport { useQueryParam } from './useQueryParam';\nimport updateUrlQuery from './updateUrlQuery';\nimport { QueryParamContext } from './QueryParamProvider';\n// from https://usehooks.com/usePrevious/\nfunction usePrevious(value) {\n  var ref = React.useRef(value);\n  React.useEffect(function () {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n// from https://github.com/lodash/lodash/issues/2340#issuecomment-360325395\nfunction isShallowEqual(objA, objB) {\n  for (var key in objA) {\n    if (!(key in objB) || objA[key] !== objB[key]) return false;\n  }\n  for (var key in objB) {\n    if (!(key in objA) || objA[key] !== objB[key]) return false;\n  }\n  return true;\n}\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\nexport var useQueryParams = function useQueryParams(paramConfigMap) {\n  var _a = React.useContext(QueryParamContext),\n    history = _a.history,\n    location = _a.location;\n  var locationIsObject = typeof location === 'object';\n  // memoize paramConfigMap to make the API nicer for consumers.\n  // otherwise we'd have to useQueryParams(useMemo(() => { foo: NumberParam }, []))\n  var prevParamConfigMap = usePrevious(paramConfigMap);\n  var hasNewParamConfig = isShallowEqual(prevParamConfigMap, paramConfigMap);\n  // prettier-ignore\n  var memoParamConfigMap = React.useMemo(function () {\n    return paramConfigMap;\n  }, [hasNewParamConfig]);\n  paramConfigMap = memoParamConfigMap;\n  // ref with current version history object (see #46)\n  var refHistory = React.useRef(history);\n  React.useEffect(function () {\n    refHistory.current = history;\n  }, [history]);\n  // ref with current version location object (see #46)\n  var refLocation = React.useRef(location);\n  React.useEffect(function () {\n    refLocation.current = location;\n  }, [location]);\n  var search = locationIsObject ? location.search : '';\n  // read in the raw query\n  var rawQuery = React.useMemo(function () {\n    return parseQueryString(search) || {};\n  }, [search]);\n  // parse each parameter via useQueryParam\n  // we reuse the logic to not recreate objects\n  var paramNames = Object.keys(paramConfigMap);\n  var paramValues = paramNames.map(function (paramName) {\n    return useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n  });\n  // we use a memo here to prevent recreating the containing decodedValues object\n  // which would break === comparisons even if no values changed.\n  var decodedValues = React.useMemo(function () {\n    // iterate over the decoded values and build an object\n    var decodedValues = {};\n    for (var i = 0; i < paramNames.length; ++i) {\n      decodedValues[paramNames[i]] = paramValues[i];\n    }\n    return decodedValues;\n  }, paramValues); // eslint-disable-line react-hooks/exhaustive-deps\n  // create a setter for updating multiple query params at once\n  var setQuery = React.useCallback(function (changes, updateType) {\n    // encode as strings for the URL\n    var encodedChanges = encodeQueryParams(paramConfigMap, changes);\n    // update the URL\n    updateUrlQuery(encodedChanges, refHistory.current.location || refLocation.current,\n    // see #46\n    refHistory.current, updateType);\n  }, [paramConfigMap]);\n  // no longer Partial\n  return [decodedValues, setQuery];\n};\nexport default useQueryParams;","map":{"version":3,"names":["React","parse","parseQueryString","encodeQueryParams","useQueryParam","updateUrlQuery","QueryParamContext","usePrevious","value","ref","useRef","useEffect","current","isShallowEqual","objA","objB","key","useQueryParams","paramConfigMap","_a","useContext","history","location","locationIsObject","prevParamConfigMap","hasNewParamConfig","memoParamConfigMap","useMemo","refHistory","refLocation","search","rawQuery","paramNames","Object","keys","paramValues","map","paramName","decodedValues","i","length","setQuery","useCallback","changes","updateType","encodedChanges"],"sources":["/root/experiment/nova-explorer/node_modules/use-query-params/esm/useQueryParams.js"],"sourcesContent":["import * as React from 'react';\nimport { parse as parseQueryString, encodeQueryParams, } from 'serialize-query-params';\nimport { useQueryParam } from './useQueryParam';\nimport updateUrlQuery from './updateUrlQuery';\nimport { QueryParamContext } from './QueryParamProvider';\n// from https://usehooks.com/usePrevious/\nfunction usePrevious(value) {\n    var ref = React.useRef(value);\n    React.useEffect(function () {\n        ref.current = value;\n    }, [value]);\n    return ref.current;\n}\n// from https://github.com/lodash/lodash/issues/2340#issuecomment-360325395\nfunction isShallowEqual(objA, objB) {\n    for (var key in objA)\n        if (!(key in objB) || objA[key] !== objB[key])\n            return false;\n    for (var key in objB)\n        if (!(key in objA) || objA[key] !== objB[key])\n            return false;\n    return true;\n}\n/**\n * Given a query parameter configuration (mapping query param name to { encode, decode }),\n * return an object with the decoded values and a setter for updating them.\n */\nexport var useQueryParams = function (paramConfigMap) {\n    var _a = React.useContext(QueryParamContext), history = _a.history, location = _a.location;\n    var locationIsObject = typeof location === 'object';\n    // memoize paramConfigMap to make the API nicer for consumers.\n    // otherwise we'd have to useQueryParams(useMemo(() => { foo: NumberParam }, []))\n    var prevParamConfigMap = usePrevious(paramConfigMap);\n    var hasNewParamConfig = isShallowEqual(prevParamConfigMap, paramConfigMap);\n    // prettier-ignore\n    var memoParamConfigMap = React.useMemo(function () { return paramConfigMap; }, [\n        hasNewParamConfig,\n    ]);\n    paramConfigMap = memoParamConfigMap;\n    // ref with current version history object (see #46)\n    var refHistory = React.useRef(history);\n    React.useEffect(function () {\n        refHistory.current = history;\n    }, [history]);\n    // ref with current version location object (see #46)\n    var refLocation = React.useRef(location);\n    React.useEffect(function () {\n        refLocation.current = location;\n    }, [location]);\n    var search = locationIsObject ? location.search : '';\n    // read in the raw query\n    var rawQuery = React.useMemo(function () { return parseQueryString(search) || {}; }, [\n        search,\n    ]);\n    // parse each parameter via useQueryParam\n    // we reuse the logic to not recreate objects\n    var paramNames = Object.keys(paramConfigMap);\n    var paramValues = paramNames.map(function (paramName) {\n        return useQueryParam(paramName, paramConfigMap[paramName], rawQuery)[0];\n    });\n    // we use a memo here to prevent recreating the containing decodedValues object\n    // which would break === comparisons even if no values changed.\n    var decodedValues = React.useMemo(function () {\n        // iterate over the decoded values and build an object\n        var decodedValues = {};\n        for (var i = 0; i < paramNames.length; ++i) {\n            decodedValues[paramNames[i]] = paramValues[i];\n        }\n        return decodedValues;\n    }, paramValues); // eslint-disable-line react-hooks/exhaustive-deps\n    // create a setter for updating multiple query params at once\n    var setQuery = React.useCallback(function (changes, updateType) {\n        // encode as strings for the URL\n        var encodedChanges = encodeQueryParams(paramConfigMap, changes);\n        // update the URL\n        updateUrlQuery(encodedChanges, refHistory.current.location || refLocation.current, // see #46\n        refHistory.current, updateType);\n    }, [paramConfigMap]);\n    // no longer Partial\n    return [decodedValues, setQuery];\n};\nexport default useQueryParams;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}