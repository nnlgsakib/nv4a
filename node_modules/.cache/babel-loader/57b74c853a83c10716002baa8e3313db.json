{"ast":null,"code":"import * as Serialize from './serialize';\n/**\n * String values\n */\nexport var StringParam = {\n  encode: Serialize.encodeString,\n  decode: Serialize.decodeString\n};\n/**\n * Numbers (integers or floats)\n */\nexport var NumberParam = {\n  encode: Serialize.encodeNumber,\n  decode: Serialize.decodeNumber\n};\n/**\n * For flat objects where values are strings\n */\nexport var ObjectParam = {\n  encode: Serialize.encodeObject,\n  decode: Serialize.decodeObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var ArrayParam = {\n  encode: Serialize.encodeArray,\n  decode: Serialize.decodeArray\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var NumericArrayParam = {\n  encode: Serialize.encodeNumericArray,\n  decode: Serialize.decodeNumericArray\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\nexport var JsonParam = {\n  encode: Serialize.encodeJson,\n  decode: Serialize.decodeJson\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\nexport var DateParam = {\n  encode: Serialize.encodeDate,\n  decode: Serialize.decodeDate\n};\n/**\n * For dates in simplified extended ISO format (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ)\n */\nexport var DateTimeParam = {\n  encode: Serialize.encodeDateTime,\n  decode: Serialize.decodeDateTime\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\nexport var BooleanParam = {\n  encode: Serialize.encodeBoolean,\n  decode: Serialize.decodeBoolean\n};\n/**\n * For flat objects where the values are numbers\n */\nexport var NumericObjectParam = {\n  encode: Serialize.encodeNumericObject,\n  decode: Serialize.decodeNumericObject\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var DelimitedArrayParam = {\n  encode: Serialize.encodeDelimitedArray,\n  decode: Serialize.decodeDelimitedArray\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\nexport var DelimitedNumericArrayParam = {\n  encode: Serialize.encodeDelimitedNumericArray,\n  decode: Serialize.decodeDelimitedNumericArray\n};","map":{"version":3,"names":["Serialize","StringParam","encode","encodeString","decode","decodeString","NumberParam","encodeNumber","decodeNumber","ObjectParam","encodeObject","decodeObject","ArrayParam","encodeArray","decodeArray","NumericArrayParam","encodeNumericArray","decodeNumericArray","JsonParam","encodeJson","decodeJson","DateParam","encodeDate","decodeDate","DateTimeParam","encodeDateTime","decodeDateTime","BooleanParam","encodeBoolean","decodeBoolean","NumericObjectParam","encodeNumericObject","decodeNumericObject","DelimitedArrayParam","encodeDelimitedArray","decodeDelimitedArray","DelimitedNumericArrayParam","encodeDelimitedNumericArray","decodeDelimitedNumericArray"],"sources":["/root/experiment/nova-explorer/node_modules/serialize-query-params/esm/params.js"],"sourcesContent":["import * as Serialize from './serialize';\n/**\n * String values\n */\nexport var StringParam = {\n    encode: Serialize.encodeString,\n    decode: Serialize.decodeString,\n};\n/**\n * Numbers (integers or floats)\n */\nexport var NumberParam = {\n    encode: Serialize.encodeNumber,\n    decode: Serialize.decodeNumber,\n};\n/**\n * For flat objects where values are strings\n */\nexport var ObjectParam = {\n    encode: Serialize.encodeObject,\n    decode: Serialize.decodeObject,\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var ArrayParam = {\n    encode: Serialize.encodeArray,\n    decode: Serialize.decodeArray,\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var NumericArrayParam = {\n    encode: Serialize.encodeNumericArray,\n    decode: Serialize.decodeNumericArray,\n};\n/**\n * For any type of data, encoded via JSON.stringify\n */\nexport var JsonParam = {\n    encode: Serialize.encodeJson,\n    decode: Serialize.decodeJson,\n};\n/**\n * For simple dates (YYYY-MM-DD)\n */\nexport var DateParam = {\n    encode: Serialize.encodeDate,\n    decode: Serialize.decodeDate,\n};\n/**\n * For dates in simplified extended ISO format (YYYY-MM-DDTHH:mm:ss.sssZ or ±YYYYYY-MM-DDTHH:mm:ss.sssZ)\n */\nexport var DateTimeParam = {\n    encode: Serialize.encodeDateTime,\n    decode: Serialize.decodeDateTime,\n};\n/**\n * For boolean values: 1 = true, 0 = false\n */\nexport var BooleanParam = {\n    encode: Serialize.encodeBoolean,\n    decode: Serialize.decodeBoolean,\n};\n/**\n * For flat objects where the values are numbers\n */\nexport var NumericObjectParam = {\n    encode: Serialize.encodeNumericObject,\n    decode: Serialize.decodeNumericObject,\n};\n/**\n * For flat arrays of strings, filters out undefined values during decode\n */\nexport var DelimitedArrayParam = {\n    encode: Serialize.encodeDelimitedArray,\n    decode: Serialize.decodeDelimitedArray,\n};\n/**\n * For flat arrays where the values are numbers, filters out undefined values during decode\n */\nexport var DelimitedNumericArrayParam = {\n    encode: Serialize.encodeDelimitedNumericArray,\n    decode: Serialize.decodeDelimitedNumericArray,\n};\n"],"mappings":"AAAA,OAAO,KAAKA,SAAS,MAAM,aAAa;AACxC;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG;EACrBC,MAAM,EAAEF,SAAS,CAACG,YAAY;EAC9BC,MAAM,EAAEJ,SAAS,CAACK;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG;EACrBJ,MAAM,EAAEF,SAAS,CAACO,YAAY;EAC9BH,MAAM,EAAEJ,SAAS,CAACQ;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,WAAW,GAAG;EACrBP,MAAM,EAAEF,SAAS,CAACU,YAAY;EAC9BN,MAAM,EAAEJ,SAAS,CAACW;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,UAAU,GAAG;EACpBV,MAAM,EAAEF,SAAS,CAACa,WAAW;EAC7BT,MAAM,EAAEJ,SAAS,CAACc;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,iBAAiB,GAAG;EAC3Bb,MAAM,EAAEF,SAAS,CAACgB,kBAAkB;EACpCZ,MAAM,EAAEJ,SAAS,CAACiB;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,SAAS,GAAG;EACnBhB,MAAM,EAAEF,SAAS,CAACmB,UAAU;EAC5Bf,MAAM,EAAEJ,SAAS,CAACoB;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,SAAS,GAAG;EACnBnB,MAAM,EAAEF,SAAS,CAACsB,UAAU;EAC5BlB,MAAM,EAAEJ,SAAS,CAACuB;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,aAAa,GAAG;EACvBtB,MAAM,EAAEF,SAAS,CAACyB,cAAc;EAChCrB,MAAM,EAAEJ,SAAS,CAAC0B;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,YAAY,GAAG;EACtBzB,MAAM,EAAEF,SAAS,CAAC4B,aAAa;EAC/BxB,MAAM,EAAEJ,SAAS,CAAC6B;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,kBAAkB,GAAG;EAC5B5B,MAAM,EAAEF,SAAS,CAAC+B,mBAAmB;EACrC3B,MAAM,EAAEJ,SAAS,CAACgC;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,mBAAmB,GAAG;EAC7B/B,MAAM,EAAEF,SAAS,CAACkC,oBAAoB;EACtC9B,MAAM,EAAEJ,SAAS,CAACmC;AACtB,CAAC;AACD;AACA;AACA;AACA,OAAO,IAAIC,0BAA0B,GAAG;EACpClC,MAAM,EAAEF,SAAS,CAACqC,2BAA2B;EAC7CjC,MAAM,EAAEJ,SAAS,CAACsC;AACtB,CAAC"},"metadata":{},"sourceType":"module"}