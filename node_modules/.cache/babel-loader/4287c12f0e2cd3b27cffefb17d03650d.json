{"ast":null,"code":"import _slicedToArray from\"/root/experiment/nova-explorer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as React from\"react\";import useInterval from\"use-interval\";import{hexToNumber}from\"@etclabscore/eserialize\";export var getBlocks=function getBlocks(from,to,erpc){var promises=[];for(var i=from;i<=to;i++){promises.push(erpc.eth_getBlockByNumber(\"0x\".concat(i.toString(16)),true));}return Promise.all(promises);};export var useBlockNumber=function useBlockNumber(erpc){var _React$useState=React.useState(NaN),_React$useState2=_slicedToArray(_React$useState,2),blockNumber=_React$useState2[0],setBlockNumber=_React$useState2[1];useInterval(function(){if(!erpc){return;}erpc.eth_blockNumber().then(function(bn){setBlockNumber(hexToNumber(bn));});},7000,true);React.useEffect(function(){if(erpc){erpc.eth_blockNumber().then(function(bn){setBlockNumber(hexToNumber(bn));});}},[erpc]);return[blockNumber];};export default getBlocks;","map":{"version":3,"names":["React","useInterval","hexToNumber","getBlocks","from","to","erpc","promises","i","push","eth_getBlockByNumber","concat","toString","Promise","all","useBlockNumber","_React$useState","useState","NaN","_React$useState2","_slicedToArray","blockNumber","setBlockNumber","eth_blockNumber","then","bn","useEffect"],"sources":["/root/experiment/nova-explorer/src/helpers.tsx"],"sourcesContent":["import ERPC from \"@etclabscore/ethereum-json-rpc\";\nimport * as React from \"react\";\nimport useInterval from \"use-interval\";\nimport { hexToNumber } from \"@etclabscore/eserialize\";\n\nexport const getBlocks = (from: number, to: number, erpc: ERPC): Promise<any> => {\n  const promises: any[] = [];\n\n  for (let i = from; i <= to; i++) {\n    promises.push(erpc.eth_getBlockByNumber(`0x${i.toString(16)}`, true));\n  }\n  return Promise.all(promises);\n};\n\nexport const useBlockNumber = (erpc: ERPC | undefined): [number] => {\n  const [blockNumber, setBlockNumber] = React.useState<number>(NaN);\n  useInterval(() => {\n    if (!erpc) {\n      return;\n    }\n    erpc.eth_blockNumber().then((bn: string) => {\n      setBlockNumber(hexToNumber(bn));\n    });\n  }, 7000, true);\n  React.useEffect(() => {\n    if (erpc) {\n      erpc.eth_blockNumber().then((bn: string) => {\n        setBlockNumber(hexToNumber(bn));\n      });\n    }\n  }, [erpc]);\n  return [blockNumber];\n};\n\nexport default getBlocks;\n"],"mappings":"qJACA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAC9B,MAAO,CAAAC,WAAW,KAAM,cAAc,CACtC,OAASC,WAAW,KAAQ,yBAAyB,CAErD,MAAO,IAAM,CAAAC,SAAS,CAAG,QAAZ,CAAAA,SAASA,CAAIC,IAAY,CAAEC,EAAU,CAAEC,IAAU,CAAmB,CAC/E,GAAM,CAAAC,QAAe,CAAG,EAAE,CAE1B,IAAK,GAAI,CAAAC,CAAC,CAAGJ,IAAI,CAAEI,CAAC,EAAIH,EAAE,CAAEG,CAAC,EAAE,CAAE,CAC/BD,QAAQ,CAACE,IAAI,CAACH,IAAI,CAACI,oBAAoB,MAAAC,MAAA,CAAMH,CAAC,CAACI,QAAQ,CAAC,EAAE,CAAC,EAAI,IAAI,CAAC,CAAC,CACvE,CACA,MAAO,CAAAC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC,CAC9B,CAAC,CAED,MAAO,IAAM,CAAAQ,cAAc,CAAG,QAAjB,CAAAA,cAAcA,CAAIT,IAAsB,CAAe,CAClE,IAAAU,eAAA,CAAsChB,KAAK,CAACiB,QAAQ,CAASC,GAAG,CAAC,CAAAC,gBAAA,CAAAC,cAAA,CAAAJ,eAAA,IAA1DK,WAAW,CAAAF,gBAAA,IAAEG,cAAc,CAAAH,gBAAA,IAClClB,WAAW,CAAC,UAAM,CAChB,GAAI,CAACK,IAAI,CAAE,CACT,OACF,CACAA,IAAI,CAACiB,eAAe,CAAC,CAAC,CAACC,IAAI,CAAC,SAACC,EAAU,CAAK,CAC1CH,cAAc,CAACpB,WAAW,CAACuB,EAAE,CAAC,CAAC,CACjC,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAE,IAAI,CAAC,CACdzB,KAAK,CAAC0B,SAAS,CAAC,UAAM,CACpB,GAAIpB,IAAI,CAAE,CACRA,IAAI,CAACiB,eAAe,CAAC,CAAC,CAACC,IAAI,CAAC,SAACC,EAAU,CAAK,CAC1CH,cAAc,CAACpB,WAAW,CAACuB,EAAE,CAAC,CAAC,CACjC,CAAC,CAAC,CACJ,CACF,CAAC,CAAE,CAACnB,IAAI,CAAC,CAAC,CACV,MAAO,CAACe,WAAW,CAAC,CACtB,CAAC,CAED,cAAe,CAAAlB,SAAS"},"metadata":{},"sourceType":"module"}