{"ast":null,"code":"/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function encodeQueryParams(paramConfigMap, query) {\n  var encodedQuery = {};\n  var paramNames = Object.keys(query);\n  for (var _i = 0, paramNames_1 = paramNames; _i < paramNames_1.length; _i++) {\n    var paramName = paramNames_1[_i];\n    var decodedValue = query[paramName];\n    if (decodedValue == null) {\n      encodedQuery[paramName] = undefined;\n      continue;\n    }\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Encoding parameter \" + paramName + \" as string since it was not configured.\");\n      }\n      // NOTE: we could just not encode it, but it is probably convenient to have\n      // it be included by default as a string type.\n      encodedQuery[paramName] = String(decodedValue);\n    } else {\n      encodedQuery[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n    }\n  }\n  return encodedQuery;\n}\nexport default encodeQueryParams;","map":{"version":3,"names":["encodeQueryParams","paramConfigMap","query","encodedQuery","paramNames","Object","keys","_i","paramNames_1","length","paramName","decodedValue","undefined","process","env","NODE_ENV","console","warn","String","encode"],"sources":["/root/experiment/nova-explorer/node_modules/serialize-query-params/esm/encodeQueryParams.js"],"sourcesContent":["/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function encodeQueryParams(paramConfigMap, query) {\n    var encodedQuery = {};\n    var paramNames = Object.keys(query);\n    for (var _i = 0, paramNames_1 = paramNames; _i < paramNames_1.length; _i++) {\n        var paramName = paramNames_1[_i];\n        var decodedValue = query[paramName];\n        if (decodedValue == null) {\n            encodedQuery[paramName] = undefined;\n            continue;\n        }\n        if (!paramConfigMap[paramName]) {\n            if (process.env.NODE_ENV === 'development') {\n                console.warn(\"Encoding parameter \" + paramName + \" as string since it was not configured.\");\n            }\n            // NOTE: we could just not encode it, but it is probably convenient to have\n            // it be included by default as a string type.\n            encodedQuery[paramName] = String(decodedValue);\n        }\n        else {\n            encodedQuery[paramName] = paramConfigMap[paramName].encode(query[paramName]);\n        }\n    }\n    return encodedQuery;\n}\nexport default encodeQueryParams;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAACC,cAAc,EAAEC,KAAK,EAAE;EACrD,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,IAAIC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACJ,KAAK,CAAC;EACnC,KAAK,IAAIK,EAAE,GAAG,CAAC,EAAEC,YAAY,GAAGJ,UAAU,EAAEG,EAAE,GAAGC,YAAY,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IACxE,IAAIG,SAAS,GAAGF,YAAY,CAACD,EAAE,CAAC;IAChC,IAAII,YAAY,GAAGT,KAAK,CAACQ,SAAS,CAAC;IACnC,IAAIC,YAAY,IAAI,IAAI,EAAE;MACtBR,YAAY,CAACO,SAAS,CAAC,GAAGE,SAAS;MACnC;IACJ;IACA,IAAI,CAACX,cAAc,CAACS,SAAS,CAAC,EAAE;MAC5B,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QACxCC,OAAO,CAACC,IAAI,CAAC,qBAAqB,GAAGP,SAAS,GAAG,yCAAyC,CAAC;MAC/F;MACA;MACA;MACAP,YAAY,CAACO,SAAS,CAAC,GAAGQ,MAAM,CAACP,YAAY,CAAC;IAClD,CAAC,MACI;MACDR,YAAY,CAACO,SAAS,CAAC,GAAGT,cAAc,CAACS,SAAS,CAAC,CAACS,MAAM,CAACjB,KAAK,CAACQ,SAAS,CAAC,CAAC;IAChF;EACJ;EACA,OAAOP,YAAY;AACvB;AACA,eAAeH,iBAAiB"},"metadata":{},"sourceType":"module"}