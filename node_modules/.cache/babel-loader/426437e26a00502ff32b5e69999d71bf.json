{"ast":null,"code":"import _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n    return arr2;\n  }\n}\nvar fontDictionary = {\n  \"American Typewriter\": 2.09,\n  Baskerville: 2.51,\n  Georgia: 2.27,\n  \"Hoefler Text\": 2.39,\n  Palatino: 2.26,\n  \"Times New Roman\": 2.48,\n  Arial: 2.26,\n  \"Gill Sans\": 2.47,\n  \"Gill Sans 300\": 2.58,\n  \"Helvetica Neue\": 2.24,\n  \"Lucida Grande\": 2.05,\n  Tahoma: 2.25,\n  \"Trebuchet MS\": 2.2,\n  Verdana: 1.96,\n  \"Courier New\": 1.67,\n  cursive: 1.84,\n  fantasy: 2.09,\n  monospace: 1.81,\n  serif: 2.04,\n  \"sans-serif\": 1.89\n}; //https://developer.mozilla.org/en/docs/Web/CSS/length\n// Absolute sizes in pixels for obsolete measurement units.\n\nvar absoluteMeasurementUnitsToPixels = {\n  mm: 3.8,\n  sm: 38,\n  pt: 1.33,\n  pc: 16,\n  in: 96,\n  px: 1\n};\nvar relativeMeasurementUnitsCoef = {\n  em: 1,\n  ex: 0.5\n};\nvar coefficients = {\n  averageFontConstant: 2.1675,\n  // Average pixels per glyph in existing font.\n  widthOverlapCoef: 1.25,\n  // Coefficient for width value to prevent overlap.\n  heightOverlapCoef: 1.05,\n  // Coefficient for height value to prevent overlap.\n  lineCapitalCoef: 1.15,\n  // Coefficient for height value. Reserve space for capital chars.\n  lineSpaceHeightCoef: 0.2 // Coefficient for height value. Reserve space between lines.\n};\n\nvar defaultStyle = {\n  lineHeight: 1,\n  letterSpacing: \"0px\",\n  fontSize: 0,\n  angle: 0,\n  fontFamily: \"\"\n};\nvar _degreeToRadian = function _degreeToRadian(angle) {\n  return angle * Math.PI / 180;\n};\nvar _getFontCharacterConstant = function _getFontCharacterConstant(fontFamily) {\n  var firstFont = fontFamily.split(\",\")[0].replace(/'|\"/g, \"\");\n  return fontDictionary[firstFont] || coefficients.averageFontConstant;\n};\nvar _splitToLines = function _splitToLines(text) {\n  return Array.isArray(text) ? text : text.toString().split(/\\r\\n|\\r|\\n/g);\n};\nvar _getSizeWithRotate = function _getSizeWithRotate(axisSize, dependentSize, angle) {\n  var angleInRadian = _degreeToRadian(angle);\n  return Math.abs(Math.cos(angleInRadian) * axisSize) + Math.abs(Math.sin(angleInRadian) * dependentSize);\n};\n/**\n * Convert length-type parameters from specific measurement units to pixels\n * @param  {string} length Css length string value.\n * @param  {number} fontSize Current text font-size.\n * @returns {number} Approximate Css length in pixels.\n */\n\nvar convertLengthToPixels = function convertLengthToPixels(length, fontSize) {\n  var attribute = length.match(/[a-zA-Z%]+/)[0];\n  var value = length.match(/[0-9.,]+/);\n  var result;\n  if (absoluteMeasurementUnitsToPixels.hasOwnProperty(attribute)) {\n    result = value * absoluteMeasurementUnitsToPixels[attribute];\n  } else if (relativeMeasurementUnitsCoef.hasOwnProperty(attribute)) {\n    result = (fontSize ? value * fontSize : value * defaultStyle.fontSize) * relativeMeasurementUnitsCoef[attribute];\n  } else {\n    result = value;\n  }\n  return result;\n};\nvar _prepareParams = function _prepareParams(inputStyle, index) {\n  var lineStyle = Array.isArray(inputStyle) ? inputStyle[index] : inputStyle;\n  var style = _defaults({}, lineStyle, defaultStyle);\n  return _assign({}, style, {\n    characterConstant: style.characterConstant || _getFontCharacterConstant(style.fontFamily),\n    letterSpacing: convertLengthToPixels(style.letterSpacing, style.fontSize),\n    fontSize: typeof style.fontSize === \"number\" ? style.fontSize : convertLengthToPixels(String(style.fontSize))\n  });\n};\nvar _approximateTextWidthInternal = function _approximateTextWidthInternal(text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n  var widths = _splitToLines(text).map(function (line, index) {\n    var len = line.toString().length;\n    var _prepareParams2 = _prepareParams(style, index),\n      fontSize = _prepareParams2.fontSize,\n      characterConstant = _prepareParams2.characterConstant,\n      letterSpacing = _prepareParams2.letterSpacing;\n    return len * fontSize / characterConstant + letterSpacing * Math.max(len - 1, 0);\n  });\n  return Math.max.apply(Math, _toConsumableArray(widths));\n};\nvar _approximateTextHeightInternal = function _approximateTextHeightInternal(text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n  return _splitToLines(text).reduce(function (total, line, index) {\n    var lineStyle = _prepareParams(style, index);\n    var containsCaps = line.toString().match(/[(A-Z)(0-9)]/);\n    var height = containsCaps ? lineStyle.fontSize * coefficients.lineCapitalCoef : lineStyle.fontSize;\n    var emptySpace = index === 0 ? 0 : lineStyle.fontSize * coefficients.lineSpaceHeightCoef;\n    return total + lineStyle.lineHeight * (height + emptySpace);\n  }, 0);\n};\n/**\n * Predict text size by font params.\n * @param {string} text Content for width calculation.\n * @param {Object} style Text styles, ,fontFamily, fontSize, etc.\n * @param {string} style.fontFamily Text fontFamily.\n * @param {(number|string)} style.fontSize Text fontSize.\n * @param {number} style.angle Text rotate angle.\n * @param {string} style.letterSpacing Text letterSpacing(space between letters).\n * @param {number} style.characterConstant Average pixels per glyph.\n * @param {number} style.lineHeight Line height coefficient.\n * @returns {number} Approximate text label height.\n */\n\nvar approximateTextSize = function approximateTextSize(text, style) {\n  var angle = Array.isArray(style) ? style[0] && style[0].angle : style && style.angle;\n  var height = _approximateTextHeightInternal(text, style);\n  var width = _approximateTextWidthInternal(text, style);\n  var widthWithRotate = angle ? _getSizeWithRotate(width, height, angle) : width;\n  var heightWithRotate = angle ? _getSizeWithRotate(height, width, angle) : height;\n  return {\n    width: widthWithRotate * coefficients.widthOverlapCoef,\n    height: heightWithRotate * coefficients.heightOverlapCoef\n  };\n};\nexport default {\n  approximateTextSize: approximateTextSize,\n  convertLengthToPixels: convertLengthToPixels\n};","map":{"version":3,"names":["_defaults","_assign","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_nonIterableSpread","TypeError","iter","Symbol","iterator","Object","prototype","toString","call","Array","from","isArray","i","arr2","length","fontDictionary","Baskerville","Georgia","Palatino","Arial","Tahoma","Verdana","cursive","fantasy","monospace","serif","absoluteMeasurementUnitsToPixels","mm","sm","pt","pc","in","px","relativeMeasurementUnitsCoef","em","ex","coefficients","averageFontConstant","widthOverlapCoef","heightOverlapCoef","lineCapitalCoef","lineSpaceHeightCoef","defaultStyle","lineHeight","letterSpacing","fontSize","angle","fontFamily","_degreeToRadian","Math","PI","_getFontCharacterConstant","firstFont","split","replace","_splitToLines","text","_getSizeWithRotate","axisSize","dependentSize","angleInRadian","abs","cos","sin","convertLengthToPixels","attribute","match","value","result","hasOwnProperty","_prepareParams","inputStyle","index","lineStyle","style","characterConstant","String","_approximateTextWidthInternal","undefined","widths","map","line","len","_prepareParams2","max","apply","_approximateTextHeightInternal","reduce","total","containsCaps","height","emptySpace","approximateTextSize","width","widthWithRotate","heightWithRotate"],"sources":["/root/experiment/nova-explorer/node_modules/victory-core/es/victory-util/textsize.js"],"sourcesContent":["import _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nvar fontDictionary = {\n  \"American Typewriter\": 2.09,\n  Baskerville: 2.51,\n  Georgia: 2.27,\n  \"Hoefler Text\": 2.39,\n  Palatino: 2.26,\n  \"Times New Roman\": 2.48,\n  Arial: 2.26,\n  \"Gill Sans\": 2.47,\n  \"Gill Sans 300\": 2.58,\n  \"Helvetica Neue\": 2.24,\n  \"Lucida Grande\": 2.05,\n  Tahoma: 2.25,\n  \"Trebuchet MS\": 2.2,\n  Verdana: 1.96,\n  \"Courier New\": 1.67,\n  cursive: 1.84,\n  fantasy: 2.09,\n  monospace: 1.81,\n  serif: 2.04,\n  \"sans-serif\": 1.89\n}; //https://developer.mozilla.org/en/docs/Web/CSS/length\n// Absolute sizes in pixels for obsolete measurement units.\n\nvar absoluteMeasurementUnitsToPixels = {\n  mm: 3.8,\n  sm: 38,\n  pt: 1.33,\n  pc: 16,\n  in: 96,\n  px: 1\n};\nvar relativeMeasurementUnitsCoef = {\n  em: 1,\n  ex: 0.5\n};\nvar coefficients = {\n  averageFontConstant: 2.1675,\n  // Average pixels per glyph in existing font.\n  widthOverlapCoef: 1.25,\n  // Coefficient for width value to prevent overlap.\n  heightOverlapCoef: 1.05,\n  // Coefficient for height value to prevent overlap.\n  lineCapitalCoef: 1.15,\n  // Coefficient for height value. Reserve space for capital chars.\n  lineSpaceHeightCoef: 0.2 // Coefficient for height value. Reserve space between lines.\n\n};\nvar defaultStyle = {\n  lineHeight: 1,\n  letterSpacing: \"0px\",\n  fontSize: 0,\n  angle: 0,\n  fontFamily: \"\"\n};\n\nvar _degreeToRadian = function (angle) {\n  return angle * Math.PI / 180;\n};\n\nvar _getFontCharacterConstant = function (fontFamily) {\n  var firstFont = fontFamily.split(\",\")[0].replace(/'|\"/g, \"\");\n  return fontDictionary[firstFont] || coefficients.averageFontConstant;\n};\n\nvar _splitToLines = function (text) {\n  return Array.isArray(text) ? text : text.toString().split(/\\r\\n|\\r|\\n/g);\n};\n\nvar _getSizeWithRotate = function (axisSize, dependentSize, angle) {\n  var angleInRadian = _degreeToRadian(angle);\n\n  return Math.abs(Math.cos(angleInRadian) * axisSize) + Math.abs(Math.sin(angleInRadian) * dependentSize);\n};\n/**\n * Convert length-type parameters from specific measurement units to pixels\n * @param  {string} length Css length string value.\n * @param  {number} fontSize Current text font-size.\n * @returns {number} Approximate Css length in pixels.\n */\n\n\nvar convertLengthToPixels = function (length, fontSize) {\n  var attribute = length.match(/[a-zA-Z%]+/)[0];\n  var value = length.match(/[0-9.,]+/);\n  var result;\n\n  if (absoluteMeasurementUnitsToPixels.hasOwnProperty(attribute)) {\n    result = value * absoluteMeasurementUnitsToPixels[attribute];\n  } else if (relativeMeasurementUnitsCoef.hasOwnProperty(attribute)) {\n    result = (fontSize ? value * fontSize : value * defaultStyle.fontSize) * relativeMeasurementUnitsCoef[attribute];\n  } else {\n    result = value;\n  }\n\n  return result;\n};\n\nvar _prepareParams = function (inputStyle, index) {\n  var lineStyle = Array.isArray(inputStyle) ? inputStyle[index] : inputStyle;\n\n  var style = _defaults({}, lineStyle, defaultStyle);\n\n  return _assign({}, style, {\n    characterConstant: style.characterConstant || _getFontCharacterConstant(style.fontFamily),\n    letterSpacing: convertLengthToPixels(style.letterSpacing, style.fontSize),\n    fontSize: typeof style.fontSize === \"number\" ? style.fontSize : convertLengthToPixels(String(style.fontSize))\n  });\n};\n\nvar _approximateTextWidthInternal = function (text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n\n  var widths = _splitToLines(text).map(function (line, index) {\n    var len = line.toString().length;\n\n    var _prepareParams2 = _prepareParams(style, index),\n        fontSize = _prepareParams2.fontSize,\n        characterConstant = _prepareParams2.characterConstant,\n        letterSpacing = _prepareParams2.letterSpacing;\n\n    return len * fontSize / characterConstant + letterSpacing * Math.max(len - 1, 0);\n  });\n\n  return Math.max.apply(Math, _toConsumableArray(widths));\n};\n\nvar _approximateTextHeightInternal = function (text, style) {\n  if (text === undefined || text === \"\" || text === null) {\n    return 0;\n  }\n\n  return _splitToLines(text).reduce(function (total, line, index) {\n    var lineStyle = _prepareParams(style, index);\n\n    var containsCaps = line.toString().match(/[(A-Z)(0-9)]/);\n    var height = containsCaps ? lineStyle.fontSize * coefficients.lineCapitalCoef : lineStyle.fontSize;\n    var emptySpace = index === 0 ? 0 : lineStyle.fontSize * coefficients.lineSpaceHeightCoef;\n    return total + lineStyle.lineHeight * (height + emptySpace);\n  }, 0);\n};\n/**\n * Predict text size by font params.\n * @param {string} text Content for width calculation.\n * @param {Object} style Text styles, ,fontFamily, fontSize, etc.\n * @param {string} style.fontFamily Text fontFamily.\n * @param {(number|string)} style.fontSize Text fontSize.\n * @param {number} style.angle Text rotate angle.\n * @param {string} style.letterSpacing Text letterSpacing(space between letters).\n * @param {number} style.characterConstant Average pixels per glyph.\n * @param {number} style.lineHeight Line height coefficient.\n * @returns {number} Approximate text label height.\n */\n\n\nvar approximateTextSize = function (text, style) {\n  var angle = Array.isArray(style) ? style[0] && style[0].angle : style && style.angle;\n\n  var height = _approximateTextHeightInternal(text, style);\n\n  var width = _approximateTextWidthInternal(text, style);\n\n  var widthWithRotate = angle ? _getSizeWithRotate(width, height, angle) : width;\n  var heightWithRotate = angle ? _getSizeWithRotate(height, width, angle) : height;\n  return {\n    width: widthWithRotate * coefficients.widthOverlapCoef,\n    height: heightWithRotate * coefficients.heightOverlapCoef\n  };\n};\n\nexport default {\n  approximateTextSize: approximateTextSize,\n  convertLengthToPixels: convertLengthToPixels\n};"],"mappings":"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"},"metadata":{},"sourceType":"module"}