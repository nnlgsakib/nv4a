{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar ajv_1 = __importDefault(require(\"ajv\"));\nvar generate_method_id_1 = require(\"../generate-method-id\");\nvar parameter_validation_error_1 = __importDefault(require(\"./parameter-validation-error\"));\nvar method_not_found_error_1 = __importDefault(require(\"./method-not-found-error\"));\nvar helper_functions_1 = require(\"../helper-functions\");\n/**\n * A class to assist in validating method calls to an OpenRPC-based service. Generated Clients,\n * Servers, and many others may want to expose the interface provided by an OpenRPC document.\n * In doing so, use this class to easily create a re-useable validator for a particular method.\n */\nvar MethodCallValidator = /** @class */function () {\n  /**\n   * @param document The OpenRPC document containing the methods whose calls we want validated.\n   *\n   * @example\n   * ```typescript\n   *\n   * import { petstore } from \"@open-rpc/examples\";\n   * const petStoreMethodCallValidator = new MethodCallValidator(petstore);\n   * // Go on and use it!\n   * ```\n   *\n   */\n  function MethodCallValidator(document) {\n    var _this = this;\n    this.document = document;\n    this.ajvValidator = new ajv_1.default();\n    document.methods.forEach(function (method) {\n      var params = method.params;\n      if (method.params === undefined) {\n        return;\n      }\n      params.forEach(function (param) {\n        if (param.schema === undefined) {\n          return;\n        }\n        _this.ajvValidator.addSchema(param.schema, generate_method_id_1.generateMethodParamId(method, param));\n      });\n    });\n  }\n  /**\n   * Validates a particular method call against the OpenRPC definition for the method.\n   *\n   * @param methodName the name of the method in the OpenRPC Document.\n   * @param params the param values that you want validated.\n   *\n   * @returns an array of parameter validation errors, or if there are none, an empty array.\n   * if the method name is invalid, a [[MethodNotFoundError]] is returned.\n   *\n   * @example\n   * ```typescript\n   *\n   * import { petstore } from \"@open-rpc/examples\";\n   * const petStoreMethodCallValidator = new MethodCallValidator(petstore);\n   * const errors = petStoreMethodCallValidator.validate(\"list_pets\", []);\n   * // errors.length === 0\n   * ```\n   *\n   */\n  MethodCallValidator.prototype.validate = function (methodName, params) {\n    var _this = this;\n    if (methodName === \"rpc.discover\") {\n      return [];\n    }\n    var method = helper_functions_1.find(this.document.methods, function (o) {\n      return o.name == methodName;\n    });\n    if (!method) {\n      return new method_not_found_error_1.default(methodName, this.document, params);\n    }\n    if (method.params) {\n      var paramMap = method.params;\n      return helper_functions_1.compact(paramMap.map(function (param, index) {\n        var id;\n        if (method.paramStructure === \"by-position\") {\n          id = index;\n        } else if (method.paramStructure === \"by-name\") {\n          id = param.name;\n        } else {\n          if (params[index] !== undefined) {\n            id = index;\n          } else {\n            id = param.name;\n          }\n        }\n        var input = params[id];\n        if (input === undefined && !param.required) {\n          return;\n        }\n        if (param.schema !== undefined) {\n          var idForMethod = generate_method_id_1.generateMethodParamId(method, param);\n          var isValid = _this.ajvValidator.validate(idForMethod, input);\n          var errors = _this.ajvValidator.errors;\n          if (!isValid) {\n            return new parameter_validation_error_1.default(id, param.schema, input, errors);\n          }\n        }\n      }));\n    } else {\n      return [];\n    }\n  };\n  return MethodCallValidator;\n}();\nexports.default = MethodCallValidator;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","ajv_1","require","generate_method_id_1","parameter_validation_error_1","method_not_found_error_1","helper_functions_1","MethodCallValidator","document","_this","ajvValidator","default","methods","forEach","method","params","undefined","param","schema","addSchema","generateMethodParamId","prototype","validate","methodName","find","o","name","paramMap","compact","map","index","id","paramStructure","input","required","idForMethod","isValid","errors"],"sources":["/root/experiment/nova-explorer/node_modules/@open-rpc/schema-utils-js/build/method-call-validator/method-call-validator.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ajv_1 = __importDefault(require(\"ajv\"));\nvar generate_method_id_1 = require(\"../generate-method-id\");\nvar parameter_validation_error_1 = __importDefault(require(\"./parameter-validation-error\"));\nvar method_not_found_error_1 = __importDefault(require(\"./method-not-found-error\"));\nvar helper_functions_1 = require(\"../helper-functions\");\n/**\n * A class to assist in validating method calls to an OpenRPC-based service. Generated Clients,\n * Servers, and many others may want to expose the interface provided by an OpenRPC document.\n * In doing so, use this class to easily create a re-useable validator for a particular method.\n */\nvar MethodCallValidator = /** @class */ (function () {\n    /**\n     * @param document The OpenRPC document containing the methods whose calls we want validated.\n     *\n     * @example\n     * ```typescript\n     *\n     * import { petstore } from \"@open-rpc/examples\";\n     * const petStoreMethodCallValidator = new MethodCallValidator(petstore);\n     * // Go on and use it!\n     * ```\n     *\n     */\n    function MethodCallValidator(document) {\n        var _this = this;\n        this.document = document;\n        this.ajvValidator = new ajv_1.default();\n        document.methods.forEach(function (method) {\n            var params = method.params;\n            if (method.params === undefined) {\n                return;\n            }\n            params.forEach(function (param) {\n                if (param.schema === undefined) {\n                    return;\n                }\n                _this.ajvValidator.addSchema(param.schema, generate_method_id_1.generateMethodParamId(method, param));\n            });\n        });\n    }\n    /**\n     * Validates a particular method call against the OpenRPC definition for the method.\n     *\n     * @param methodName the name of the method in the OpenRPC Document.\n     * @param params the param values that you want validated.\n     *\n     * @returns an array of parameter validation errors, or if there are none, an empty array.\n     * if the method name is invalid, a [[MethodNotFoundError]] is returned.\n     *\n     * @example\n     * ```typescript\n     *\n     * import { petstore } from \"@open-rpc/examples\";\n     * const petStoreMethodCallValidator = new MethodCallValidator(petstore);\n     * const errors = petStoreMethodCallValidator.validate(\"list_pets\", []);\n     * // errors.length === 0\n     * ```\n     *\n     */\n    MethodCallValidator.prototype.validate = function (methodName, params) {\n        var _this = this;\n        if (methodName === \"rpc.discover\") {\n            return [];\n        }\n        var method = helper_functions_1.find(this.document.methods, function (o) { return o.name == methodName; });\n        if (!method) {\n            return new method_not_found_error_1.default(methodName, this.document, params);\n        }\n        if (method.params) {\n            var paramMap = method.params;\n            return helper_functions_1.compact(paramMap.map(function (param, index) {\n                var id;\n                if (method.paramStructure === \"by-position\") {\n                    id = index;\n                }\n                else if (method.paramStructure === \"by-name\") {\n                    id = param.name;\n                }\n                else {\n                    if (params[index] !== undefined) {\n                        id = index;\n                    }\n                    else {\n                        id = param.name;\n                    }\n                }\n                var input = params[id];\n                if (input === undefined && !param.required) {\n                    return;\n                }\n                if (param.schema !== undefined) {\n                    var idForMethod = generate_method_id_1.generateMethodParamId(method, param);\n                    var isValid = _this.ajvValidator.validate(idForMethod, input);\n                    var errors = _this.ajvValidator.errors;\n                    if (!isValid) {\n                        return new parameter_validation_error_1.default(id, param.schema, input, errors);\n                    }\n                }\n            }));\n        }\n        else {\n            return [];\n        }\n    };\n    return MethodCallValidator;\n}());\nexports.default = MethodCallValidator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}