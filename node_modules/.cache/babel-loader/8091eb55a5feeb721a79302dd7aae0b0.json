{"ast":null,"code":"import { updateLocation, updateInLocation } from 'serialize-query-params';\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\nexport function updateUrlQuery(queryReplacements, location, history, updateType) {\n  if (updateType === void 0) {\n    updateType = 'replaceIn';\n  }\n  switch (updateType) {\n    case 'replaceIn':\n      history.replace(updateInLocation(queryReplacements, location));\n      break;\n    case 'pushIn':\n      history.push(updateInLocation(queryReplacements, location));\n      break;\n    case 'replace':\n      history.replace(updateLocation(queryReplacements, location));\n      break;\n    case 'push':\n      history.push(updateLocation(queryReplacements, location));\n      break;\n    default:\n  }\n}\nexport default updateUrlQuery;","map":{"version":3,"names":["updateLocation","updateInLocation","updateUrlQuery","queryReplacements","location","history","updateType","replace","push"],"sources":["/root/experiment/nova-explorer/node_modules/use-query-params/esm/updateUrlQuery.js"],"sourcesContent":["import { updateLocation, updateInLocation, } from 'serialize-query-params';\n/**\n * Updates the URL to match the specified query changes.\n * If replaceIn or pushIn are used as the updateType, then parameters\n * not specified in queryReplacements are retained. If replace or push\n * are used, only the values in queryReplacements will be available.\n */\nexport function updateUrlQuery(queryReplacements, location, history, updateType) {\n    if (updateType === void 0) { updateType = 'replaceIn'; }\n    switch (updateType) {\n        case 'replaceIn':\n            history.replace(updateInLocation(queryReplacements, location));\n            break;\n        case 'pushIn':\n            history.push(updateInLocation(queryReplacements, location));\n            break;\n        case 'replace':\n            history.replace(updateLocation(queryReplacements, location));\n            break;\n        case 'push':\n            history.push(updateLocation(queryReplacements, location));\n            break;\n        default:\n    }\n}\nexport default updateUrlQuery;\n"],"mappings":"AAAA,SAASA,cAAc,EAAEC,gBAAgB,QAAS,wBAAwB;AAC1E;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,cAAcA,CAACC,iBAAiB,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,UAAU,EAAE;EAC7E,IAAIA,UAAU,KAAK,KAAK,CAAC,EAAE;IAAEA,UAAU,GAAG,WAAW;EAAE;EACvD,QAAQA,UAAU;IACd,KAAK,WAAW;MACZD,OAAO,CAACE,OAAO,CAACN,gBAAgB,CAACE,iBAAiB,EAAEC,QAAQ,CAAC,CAAC;MAC9D;IACJ,KAAK,QAAQ;MACTC,OAAO,CAACG,IAAI,CAACP,gBAAgB,CAACE,iBAAiB,EAAEC,QAAQ,CAAC,CAAC;MAC3D;IACJ,KAAK,SAAS;MACVC,OAAO,CAACE,OAAO,CAACP,cAAc,CAACG,iBAAiB,EAAEC,QAAQ,CAAC,CAAC;MAC5D;IACJ,KAAK,MAAM;MACPC,OAAO,CAACG,IAAI,CAACR,cAAc,CAACG,iBAAiB,EAAEC,QAAQ,CAAC,CAAC;MACzD;IACJ;EACJ;AACJ;AACA,eAAeF,cAAc"},"metadata":{},"sourceType":"module"}