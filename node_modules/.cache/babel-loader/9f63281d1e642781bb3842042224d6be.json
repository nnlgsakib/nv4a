{"ast":null,"code":"/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function decodeQueryParams(paramConfigMap, encodedQuery) {\n  var decodedQuery = {};\n  var paramNames = Object.keys(encodedQuery);\n  for (var _i = 0, paramNames_1 = paramNames; _i < paramNames_1.length; _i++) {\n    var paramName = paramNames_1[_i];\n    var encodedValue = encodedQuery[paramName];\n    if (encodedValue == null) {\n      decodedQuery[paramName] = undefined;\n      continue;\n    }\n    if (!paramConfigMap[paramName]) {\n      if (process.env.NODE_ENV === 'development') {\n        console.warn(\"Passing through parameter \" + paramName + \" during decoding since it was not configured.\");\n      }\n      // NOTE: we could just not include it, but it is probably convenient to have\n      // it default to be a string type.\n      decodedQuery[paramName] = encodedValue;\n    } else {\n      decodedQuery[paramName] = paramConfigMap[paramName].decode(encodedValue);\n    }\n  }\n  return decodedQuery;\n}","map":{"version":3,"names":["decodeQueryParams","paramConfigMap","encodedQuery","decodedQuery","paramNames","Object","keys","_i","paramNames_1","length","paramName","encodedValue","undefined","process","env","NODE_ENV","console","warn","decode"],"sources":["/root/experiment/nova-explorer/node_modules/serialize-query-params/esm/decodeQueryParams.js"],"sourcesContent":["/**\n * Convert the values in query to strings via the encode functions configured\n * in paramConfigMap\n *\n * @param paramConfigMap Map from query name to { encode, decode } config\n * @param query Query updates mapping param name to decoded value\n */\nexport function decodeQueryParams(paramConfigMap, encodedQuery) {\n    var decodedQuery = {};\n    var paramNames = Object.keys(encodedQuery);\n    for (var _i = 0, paramNames_1 = paramNames; _i < paramNames_1.length; _i++) {\n        var paramName = paramNames_1[_i];\n        var encodedValue = encodedQuery[paramName];\n        if (encodedValue == null) {\n            decodedQuery[paramName] = undefined;\n            continue;\n        }\n        if (!paramConfigMap[paramName]) {\n            if (process.env.NODE_ENV === 'development') {\n                console.warn(\"Passing through parameter \" + paramName + \" during decoding since it was not configured.\");\n            }\n            // NOTE: we could just not include it, but it is probably convenient to have\n            // it default to be a string type.\n            decodedQuery[paramName] = encodedValue;\n        }\n        else {\n            decodedQuery[paramName] = paramConfigMap[paramName].decode(encodedValue);\n        }\n    }\n    return decodedQuery;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAACC,cAAc,EAAEC,YAAY,EAAE;EAC5D,IAAIC,YAAY,GAAG,CAAC,CAAC;EACrB,IAAIC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACJ,YAAY,CAAC;EAC1C,KAAK,IAAIK,EAAE,GAAG,CAAC,EAAEC,YAAY,GAAGJ,UAAU,EAAEG,EAAE,GAAGC,YAAY,CAACC,MAAM,EAAEF,EAAE,EAAE,EAAE;IACxE,IAAIG,SAAS,GAAGF,YAAY,CAACD,EAAE,CAAC;IAChC,IAAII,YAAY,GAAGT,YAAY,CAACQ,SAAS,CAAC;IAC1C,IAAIC,YAAY,IAAI,IAAI,EAAE;MACtBR,YAAY,CAACO,SAAS,CAAC,GAAGE,SAAS;MACnC;IACJ;IACA,IAAI,CAACX,cAAc,CAACS,SAAS,CAAC,EAAE;MAC5B,IAAIG,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,EAAE;QACxCC,OAAO,CAACC,IAAI,CAAC,4BAA4B,GAAGP,SAAS,GAAG,+CAA+C,CAAC;MAC5G;MACA;MACA;MACAP,YAAY,CAACO,SAAS,CAAC,GAAGC,YAAY;IAC1C,CAAC,MACI;MACDR,YAAY,CAACO,SAAS,CAAC,GAAGT,cAAc,CAACS,SAAS,CAAC,CAACQ,MAAM,CAACP,YAAY,CAAC;IAC5E;EACJ;EACA,OAAOR,YAAY;AACvB"},"metadata":{},"sourceType":"module"}