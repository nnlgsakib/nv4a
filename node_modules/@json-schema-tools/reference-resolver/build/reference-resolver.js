"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvalidRemoteURLError = exports.InvalidFileSystemPathError = exports.InvalidJsonPointerRefError = exports.NonJsonRefError = void 0;
var json_pointer_1 = __importDefault(require("@json-schema-spec/json-pointer"));
/**
 * Error thrown when the fetched reference is not properly formatted JSON or is encoded
 * incorrectly
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { NonJsonRefError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof NonJsonRefError) { ... }
 * }
 * ```
 *
 */
var NonJsonRefError = /** @class */ (function () {
    function NonJsonRefError(obj, nonJson) {
        this.name = "NonJsonRefError";
        this.message = [
            "NonJsonRefError",
            "The resolved value at the reference: " + obj.$ref + " was not JSON.parse 'able",
            "The non-json content in question: " + nonJson,
        ].join("\n");
    }
    return NonJsonRefError;
}());
exports.NonJsonRefError = NonJsonRefError;
/**
 * Error thrown when a JSON pointer is provided but is not parseable as per the RFC6901
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { InvalidJsonPointerRefError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof InvalidJsonPointerRefError) { ... }
 * }
 * ```
 *
 */
var InvalidJsonPointerRefError = /** @class */ (function () {
    function InvalidJsonPointerRefError(obj) {
        this.name = "InvalidJsonPointerRefError";
        this.message = [
            "InvalidJsonPointerRefError",
            "The provided RFC6901 JSON Pointer is invalid: " + obj.$ref,
        ].join("\n");
    }
    return InvalidJsonPointerRefError;
}());
exports.InvalidJsonPointerRefError = InvalidJsonPointerRefError;
/**
 * Error thrown when given an invalid file system path as a reference.
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { InvalidFileSystemPathError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof InvalidFileSystemPathError) { ... }
 * }
 * ```
 *
 */
var InvalidFileSystemPathError = /** @class */ (function () {
    function InvalidFileSystemPathError(ref) {
        this.name = "InvalidFileSystemPathError";
        this.message = [
            "InvalidFileSystemPathError",
            "The path was not resolvable: " + ref,
        ].join("\n");
    }
    return InvalidFileSystemPathError;
}());
exports.InvalidFileSystemPathError = InvalidFileSystemPathError;
var isUrlLike = function (s) {
    return s.includes("://") || s.includes("localhost:");
};
/**
 * Error thrown when given an invalid file system path as a reference.
 *
 */
var InvalidRemoteURLError = /** @class */ (function () {
    function InvalidRemoteURLError(ref) {
        this.name = "InvalidRemoteURLError";
        this.message = [
            "InvalidRemoteURLError",
            "The url was not resolvable: " + ref,
        ].join("\n");
    }
    return InvalidRemoteURLError;
}());
exports.InvalidRemoteURLError = InvalidRemoteURLError;
exports.default = (function (fetch, fs) {
    var fileExistsAndReadable = function (f) {
        return new Promise(function (resolve) {
            return fs.access(f, fs.constants.F_OK | fs.constants.R_OK, function (e) {
                if (e) {
                    return resolve(false);
                }
                return resolve(true);
            });
        });
    };
    var readFile = function (f) {
        return new Promise(function (resolve) { return fs.readFile(f, "utf8", function (err, data) { return resolve(data); }); });
    };
    var resolvePointer = function (ref, root) {
        try {
            var withoutHash = ref.replace("#", "");
            var pointer = json_pointer_1.default.parse(withoutHash);
            return pointer.eval(root);
        }
        catch (e) {
            throw new InvalidJsonPointerRefError({ $ref: ref });
        }
    };
    /**
     * Given a $ref string, it will return the underlying pointed-to value.
     * For remote references, the root object is not used.
     */
    var resolveReference = function (ref, root) { return __awaiter(void 0, void 0, void 0, function () {
        var hashFragmentSplit, hashFragment, hashlessRef, fileContents, reffedSchema, result, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (ref[0] === "#") {
                        return [2 /*return*/, Promise.resolve(resolvePointer(ref, root))];
                    }
                    hashFragmentSplit = ref.split("#");
                    if (hashFragmentSplit.length > 1) {
                        hashFragment = hashFragmentSplit[hashFragmentSplit.length - 1];
                    }
                    hashlessRef = hashFragmentSplit[0];
                    return [4 /*yield*/, fileExistsAndReadable(hashlessRef)];
                case 1:
                    if (!((_a.sent()) === true)) return [3 /*break*/, 3];
                    return [4 /*yield*/, readFile(hashlessRef)];
                case 2:
                    fileContents = _a.sent();
                    reffedSchema = void 0;
                    try {
                        reffedSchema = JSON.parse(fileContents);
                    }
                    catch (e) {
                        throw new NonJsonRefError({ $ref: ref }, fileContents);
                    }
                    if (hashFragment) {
                        reffedSchema = resolvePointer(hashFragment, reffedSchema);
                    }
                    return [2 /*return*/, reffedSchema];
                case 3:
                    if (isUrlLike(ref) === false) {
                        throw new InvalidFileSystemPathError(ref);
                    }
                    _a.label = 4;
                case 4:
                    _a.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, fetch(hashlessRef).then(function (r) { return r.json(); })];
                case 5:
                    result = _a.sent();
                    return [3 /*break*/, 7];
                case 6:
                    e_1 = _a.sent();
                    throw new InvalidRemoteURLError(ref);
                case 7:
                    if (hashFragment) {
                        result = resolvePointer(hashFragment, result);
                    }
                    return [2 /*return*/, result];
            }
        });
    }); };
    return resolveReference;
});
