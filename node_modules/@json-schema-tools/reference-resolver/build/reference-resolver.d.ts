/**
 * Error thrown when the fetched reference is not properly formatted JSON or is encoded
 * incorrectly
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { NonJsonRefError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof NonJsonRefError) { ... }
 * }
 * ```
 *
 */
export declare class NonJsonRefError implements Error {
    message: string;
    name: string;
    constructor(obj: any, nonJson: string);
}
/**
 * Error thrown when a JSON pointer is provided but is not parseable as per the RFC6901
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { InvalidJsonPointerRefError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof InvalidJsonPointerRefError) { ... }
 * }
 * ```
 *
 */
export declare class InvalidJsonPointerRefError implements Error {
    name: string;
    message: string;
    constructor(obj: any);
}
/**
 * Error thrown when given an invalid file system path as a reference.
 *
 * @example
 * ```typescript
 *
 * import Dereferencer, { InvalidFileSystemPathError } from "@json-schema-tools/dereferencer";
 * const dereffer = new Dereferencer({});
 * try { await dereffer.resolve(); }
 * catch(e) {
 *   if (e instanceof InvalidFileSystemPathError) { ... }
 * }
 * ```
 *
 */
export declare class InvalidFileSystemPathError implements Error {
    name: string;
    message: string;
    constructor(ref: string);
}
/**
 * Error thrown when given an invalid file system path as a reference.
 *
 */
export declare class InvalidRemoteURLError implements Error {
    message: string;
    name: string;
    constructor(ref: string);
}
declare const _default: (fetch: any, fs: any) => (ref: string, root: any) => Promise<any>;
export default _default;
